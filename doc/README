Ultimate Debian Database (UDD)
==============================

The UDD project is an effort to collect data about the Debian in an SQL
to support Quality Assurance (QA) work.

It started in 2008 as a Google Summer of Code project, the student being
Christian von Essen, who wrote most of the code, mentor being Lucas Nussbaum,
and co-mentors being Stefano Zacchiroli and Marc Brockschmidt.

Installation
------------
- Download the code (from SVN)
- install postgresql-8.3 python-yaml python-psycopg2 libdbi-perl \
  libparams-validate-perl libdbd-pg-perl postgresql-autodoc \
  libdbi-ruby libdbd-pg-ruby curl python-debian python-dateutil
- If you want to import bugs, you also need:
  libyaml-syck-perl libio-stringy-perl libmime-tools-perl \
  liblist-moreutils-perl libparams-validate-perl libsafe-hole-perl \
  libtext-template-perl libcgi-simple-perl libmldbm-perl
- setup postgresql-8.3 (see /usr/share/doc/postgresql-common/README.Debian.gz)
  and create a database:
     createdb -U user -E SQL_ASCII udd
  ASCII encoding is necessary because some of the data we will import might
  contain invalid UTF-8 characters
  You might need to do something such as:
     createdb -E SQL_ASCII -l C udd -T template0
- install postgresql-8.3-debversion to get the debversion type
  To add the debversion type to the DB:
    CREATE EXTENSION debversion
- edit config.yaml (see README.config for details)
- setup the DB:
    psql udd < sql/setup.sql

Usage
-----
- run ./udd.py <configuration> update [ fetches the external data ]
- run ./udd.py <configuration> run [ import the data into the DB ]

To initialize the DB, do something like:
----------------------------------------
for i in $(cat config-org.yaml |grep -v "^ " |grep ":" |grep -v general |sed 's/://'); do /org/udd.debian.org/udd/update-and-run.sh $i ; done

Detailed information
--------------------
The data we import comes from different sources. Each source has a specific
type (e.g. popcon). For each such type, there is a program to import this data
into the database. These programs are called gatherers. Furthermore, there is
an optional way to update the data (i.e. get it from the source) for each
source.

Each source has its own documentation. See doc/sources/.
