#!/usr/bin/ruby
# This script generates http://udd.debian.org/how-can-i-help.json.gz which is
# used by the how-can-i-help package to list possible contributions to Debian.
# 
# encoding: US-ASCII

require 'json'
require 'dbi'
require 'pp'
require 'digest/md5'

OFILE='/srv/udd.debian.org/udd/web/how-can-i-help.json.gz'

$dbh = DBI::connect('DBI:Pg:dbname=udd;port=5452', 'udd')

def dbget(q, *args)
  if $debug
    puts "<pre>#{q}</pre>"
    p args if not args.nil?
  end
  rows, sth = nil
  duration = DBI::Utils::measure do 
    sth = $dbh.prepare(q)
    sth.execute(*args)
    rows = sth.fetch_all
  end
  if $debug
    puts "### #{duration}s"
    puts "<pre>"
    puts DBI::Utils::TableFormatter.ascii(sth.column_names, rows)
    puts "</pre>"
  end
  return rows
end

def system_r(s)
  system(s) or raise
end

class String
  def force_ascii
    self.encode!('US-ASCII', 'UTF-8', :invalid => :replace, :undef => :replace, :replace => '?')
  end
end

srcs = {}
dbget("select distinct package, source from packages_summary").each do |r|
  srcs[r['source']] ||= []
  srcs[r['source']] << r['package']
end

helpitems = []
dbget("select * from orphaned_packages").each do |r|
  hash = Digest::MD5.hexdigest("wnpp #{r['type']} #{r['source']} #{r['bug']}")
  next if srcs[r['source']].nil?
  helpitems << {
    'type' => 'wnpp',
    'hash' => hash,
    'wnpptype'=> r['type'],
    'source' => r['source'],
    'packages' => srcs[r['source']],
    'wnppbug' => r['bug'],
    'wnppdesc' => r['description'].nil? ? nil : r['description'].force_ascii
  }
end

dbget("select id, source, package, title from bugs where id in (select id from bugs_usertags where email='debian-qa@lists.debian.org' and tag='gift') and status != 'done'").each do |r|
  hash = Digest::MD5.hexdigest("gift #{r['id']}")
  helpitems << {
    'type' => 'gift',
    'hash' => hash,
    'source' => r['source'],
    'package' => r['package'],
    'bug' => r['id'],
    'title' => r['title'].force_ascii
  }
end

dbget("""select distinct packages_summary.source, package, sync
      from packages_summary, migrations where distribution='debian' and release='sid'
      and package not in (select package from packages_summary where distribution='debian' and release='jessie')
      and packages_summary.source not in (select source from sources where distribution='debian' and release='jessie')
      and packages_summary.source = migrations.source and sync is not null and age(sync) < interval '1 year'").each do |r|
  hash = Digest::MD5.hexdigest("no-testing #{r['package']}")
  helpitems << {
    'type' => 'no-testing',
    'hash' => hash,
    'source' => r['source'],
    'package' => r['package']
  }
end

fd = File::new(OFILE+'.1', 'w')
JSON::dump(helpitems, fd)
fd.close

system_r("gzip < #{OFILE+'.1'} > #{OFILE+'.2'}")
system_r("mv #{OFILE+'.2'} #{OFILE}")
system_r("rm #{OFILE+'.1'}")
